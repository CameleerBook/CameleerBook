[
  {
    "name": "I. Installation Procedures",
    "number": 1,
    "icon": {
      "name": "download"
    },
    "proofs": []
  },
  {
    "name": "II. Programming with OCaml",
    "number": 2,
    "icon": {
      "name": "terminal"
    },
    "proofs": []
  },
  {
    "name": "III. Introduction to Cameleer",
    "number": 3,
    "icon": {
      "name": "verified_user"
    },
    "proofs": []
  },
  {
    "name": "IV. Mathematical Problems",
    "number": 4,
    "icon": {
      "name": "functions"
    },
    "proofs": [
      {
        "name": "McCarthy's 91 function",
        "link": "mccarthy"
      },
      {
        "name": "Bézout Coefficients (Functional)",
        "link": "bezout"
      },
      {
        "name": "Bézout Coefficients (Imperative)",
        "link": "ext_gcd"
      },
      {
        "name": "Fast Exponentiation (Functional)",
        "link": "func_fastexp"
      },
      {
        "name": "Fast Exponentiation (Imperative)",
        "link": "fastexp"
      },
      {
        "name": "Fermat's Little Theorem",
        "link": "fermat"
      },
      {
        "name": "Euclidean Division (Functional)",
        "link": "eudiv_fun"
      },
      {
        "name": "Euclidean Division (Imperative)",
        "link": "eudiv"
      },
      {
        "name": "Modular Division",
        "link": "modArith"
      },
      {
        "name": "Tribonacci",
        "link": "tribonacci"
      },
      {
        "name": "Sieve of Erastosthenes",
        "link": "sieve"
      }
    ]
  },
  {
    "name": "V. Sorting Algorithms",
    "number": 5,
    "icon": {
      "name": "sort"
    },
    "proofs": [
      {
        "name": "Insertion Sort (Functional)",
        "link": "in_sort_poly"
      },
      {
        "name": "Insertion Sort (Tail Recursive)",
        "link": "in_sort_tail"
      },
      {
        "name": "Merge Sort (Functional)",
        "link": "merge_sort_poly"
      },
      {
        "name": "Quick Sort (Functional)",
        "link": "quick_sort_poly"
      },
      {
        "name": "Quick Sort (Tail Recursive)",
        "link": "quick_sort_tail"
      },
      {
        "name": "Selection Sort (Functional)",
        "link": "sel_sort_poly"
      },
      {
        "name": "Selection Sort (Tail Recursive)",
        "link": "sel_sort_tail"
      }
    ]
  },
  {
    "name": "VI. Searching Algorithms",
    "number": 6,
    "icon": {
      "name": "search"
    },
    "proofs": [
      {
        "name": "Linear Search (While)",
        "link": "lsearch"
      },
      {
        "name": "Linear Search (For)",
        "link": "lsearch_for"
      },
      {
        "name": "Binary Search",
        "link": "bsearch"
      },
      {
        "name": "Binary Search (Exceptions)",
        "link": "bsearch_excp"
      },
      {
        "name": "Ternary Search",
        "link": "ternary_search"
      }
    ]
  },
  {
    "name": "VII. Data Structures",
    "number": 7,
    "icon": {
      "name": "data_array"
    },
    "proofs": []
  },
  {
    "name": "VIII. Graph Algorithms",
    "number": 8,
    "icon": {
      "name": "hub"
    },
    "proofs": []
  },
  {
    "name": "IX. Selected Topics",
    "number": 9,
    "icon": {
      "name": "extension"
    },
    "proofs": []
  }
]